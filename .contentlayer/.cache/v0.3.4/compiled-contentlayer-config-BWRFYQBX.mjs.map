{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\n\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\n\nconst siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';\n\nexport const DocumentationPage = defineDocumentType(() => ({\n  name: 'DocumentationPage',\n  filePathPattern: `docs/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    label: {\n      type: 'string',\n      description: 'The label of the page in the sidebar',\n      required: true,\n    },\n    cardCTA: {\n      type: 'string',\n      description: 'The label of the CTA link on the card',\n      required: false,\n    },\n    description: {\n      type: 'string',\n      description: 'The description of the post',\n    },\n    show_child_cards: {\n      type: 'boolean',\n      default: false,\n    },\n    collapsible: {\n      type: 'boolean',\n      required: false,\n      default: false,\n    },\n    collapsed: {\n      type: 'boolean',\n      required: false,\n      default: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/blog/${getSlug(post._raw.sourceFileName)}`,\n    },\n    readingTime: {\n      type: 'number',\n      resolve: (post) => calculateReadingTime(post.body.raw),\n    },\n    slug: {\n      type: 'string',\n      resolve: (post) => getSlug(post._raw.sourceFileName),\n    },\n    structuredData: {\n      type: 'object',\n      resolve: (doc) => ({\n        '@context': 'https://schema.org',\n        '@type': 'Documentation',\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.date,\n        description: doc.description,\n        image: [siteUrl, doc.image].join(''),\n        url: [siteUrl, 'blog', doc._raw.flattenedPath].join('/'),\n        author: {\n          '@type': 'Organization',\n          name: `Ira-saas`,\n        },\n      }),\n    },\n    path: {\n      type: 'string',\n      resolve: (doc) => {\n        if (doc._id.startsWith('docs/index.md')) {\n          return '/docs';\n        }\n\n        return urlFromFilePath(doc);\n      },\n    },\n    pathSegments: {\n      type: 'json',\n      resolve: (doc) => getPathSegments(doc).map(getMetaFromFolderName),\n    },\n    resolvedPath: {\n      type: 'string',\n      resolve: (doc) => {\n        return getPathSegments(doc)\n          .map(getMetaFromFolderName)\n          .map(({ pathName }) => pathName)\n          .join('/');\n      },\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'src/content',\n  documentTypes: [DocumentationPage],\n  mdx: {\n    remarkPlugins: [],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['anchor'],\n          },\n        },\n      ],\n    ],\n  },\n});\n\nfunction calculateReadingTime(content) {\n  const wordsPerMinute = 235;\n  const numberOfWords = content.split(/\\s/g).length;\n  const minutes = numberOfWords / wordsPerMinute;\n\n  return Math.ceil(minutes);\n}\n\nfunction getSlug(fileName) {\n  return fileName.replace('.mdx', '');\n}\n\nfunction urlFromFilePath(doc) {\n  let urlPath = doc._raw.flattenedPath.replace(/^app\\/?/, '/');\n\n  if (!urlPath.startsWith('/')) {\n    urlPath = `/${urlPath}`;\n  }\n\n  return urlPath;\n}\n\nfunction getMetaFromFolderName(dirName) {\n  const re = /^((\\d+)-)?(.*)$/;\n  const [, , orderStr, pathName] = dirName.match(re) ?? [];\n  const order = orderStr ? parseInt(orderStr) : 0;\n\n  return { order, pathName };\n}\n\nfunction getPathSegments(doc) {\n  return (\n    urlFromFilePath(doc)\n      .split('/')\n      // skip `/docs` prefix\n      .slice(2)\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
